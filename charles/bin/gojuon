#!/usr/bin/env python3
import random
import sys
help_messages = '''gajuon learning helper
Usage:
    gajuon test katakana/hepburn    do a test
    gajuon search                   search for given character
    gajuon table                    show gajuon table
    gajuon help                     show this helping message
'''
a = {'a': ['あ', 'ア'], 'i': ['い', 'イ'], 'u': ['う', 'ウ'], 'e': ['え', 'エ'], 'o': ['お', 'オ']}
k = {'ka': ['か', 'カ'], 'ki': ['き', 'キ'], 'ku': ['く', 'ク'], 'ke': ['け', 'ケ'], 'ko': ['こ', 'コ']}
s = {'sa': ['さ', 'サ'], 'shi': ['し', 'シ'], 'su': ['す', 'ス'], 'se': ['せ', 'セ'], 'so': ['そ', 'ソ']}
t = {'ta': ['た', 'タ'], 'chi': ['ち', 'チ'], 'tsu': ['つ', 'ツ'], 'te': ['て', 'テ'], 'to': ['と', 'ト']}
n = {'na': ['な', 'ナ'], 'ni': ['に', 'ニ'], 'nu': ['ぬ', 'ヌ'], 'ne': ['ね', 'ネ'], 'no': ['の', 'ノ']}
h = {'ha': ['は', 'ハ'], 'hi': ['ひ', 'ヒ'], 'fu': ['ふ', 'フ'], 'he': ['へ', 'ヘ'], 'ho': ['ほ', 'ホ']}
m = {'ma': ['ま', 'マ'], 'mi': ['み', 'ミ'], 'mu': ['む', 'ム'], 'me': ['め', 'メ'], 'mo': ['も', 'モ']}
y = {'ya': ['や', 'ヤ'], 'yu': ['ゆ', 'ユ'], 'yo': ['よ', 'ヨ']}
r = {'ra': ['ら', 'ラ'], 'ri': ['り', 'リ'], 'ru': ['る', 'ル'], 're': ['れ', 'レ'], 'ro': ['ろ', 'ロ']}
w = {'wa': ['わ', 'ワ'], ' n': ['ん', 'ン'], 'wo': ['を', 'ヲ']}

g = {'ga': ['が', 'ガ'], 'gi': ['ぎ', 'ギ'], 'gu': ['ぐ', 'グ'], 'ge': ['げ', 'ゲ'], 'go': ['ご', 'ゴ']}
z = {'za': ['ざ', 'ザ'], 'ji': ['じ', 'ジ'], 'zu': ['ず', 'ズ'], 'ze': ['ぜ', 'ゼ'], 'zo': ['ぞ', 'ゾ']}
d = {'da': ['だ', 'ダ'], 'ji': ['ぢ', 'ヂ'], 'zu': ['づ', 'ヅ'], 'de': ['で', 'デ'], 'do': ['ど', 'ド']}
b = {'ba': ['ば', 'バ'], 'bi': ['び', 'ビ'], 'bu': ['ぶ', 'ブ'], 'be': ['べ', 'ベ'], 'bo': ['ぼ', 'ボ']}
p = {'pa': ['ぱ', 'パ'], 'pi': ['ぴ', 'ピ'], 'pu': ['ぷ', 'プ'], 'pe': ['ぺ', 'ペ'], 'po': ['ぽ', 'ポ']}


data = [
    a,
    k,
    s,
    t,
    n,
    h,
    m,
    y,
    r,
    w,

    g,
    z,
    d,
    b,
    p,
]


characters = sum([list(i.items()) for i in data], list())


def test():
    if len(sys.argv) < 3:
        index = [0, 1]
    elif sys.argv[2][0].lower() == 'h':
        index = [0]
    elif sys.argv[2][0].lower() == 'k':
        index = [1]
    else:
        index = [0, 1]
    wrong = list()
    quiz = 0
    correct = 0
    while(True):
        random.shuffle(characters)
        indexes = random.sample(index * len(characters), len(characters))
        if len(index) == 2:
            indexes += [1 - i for i in indexes]
        try:
            for character, idx in zip(characters * len(index), indexes):
                result = input('{}: '.format(character[1][idx])).strip()
                if not (result == character[0].strip() or result in character[1]):
                    print('{}: {}, {}'.format(character[0], character[1][0], character[1][1]))
                    wrong.append((result, character))
                else:
                    correct += 1
                quiz += 1
        finally:
            print('\nACCURACY: {}/{}={:0.2f}%'.format(correct, quiz, 100 * (correct / quiz)))
            print('WRONG ANSWERS:')
            for result, character in wrong:
                print('{}: {}, {} | {}'.format(character[0], character[1][0], character[1][1], result))


def search():
    while True:
        found = list()
        char = input('Searching for:')
        for line in data:
            if char in line:
                key = char
                found.append((key, line[key]))
            else:
                for key in line:
                    if char in line[key]:
                        found.append((key, line[key]))
        for key, line in found:
            print('{}: {}, {}'.format(key, line[0], line[1]))


def table():
    sort_dict = {'a': 1, 'i': 2, 'u': 3, 'e': 4, 'o': 5, 'n': 3}
    for i in data:
        tmp = sorted(i.keys(), key=lambda x: sort_dict[x[-1]])
        chars = list()
        japan = list()
        for char in tmp:
            while len(chars) < sort_dict[char[-1]] - 1:
                chars.append(' ')
                japan.append(' ' * 8)
            chars.append(char)
            japan.append(', '.join(i[char]))
        print(('{:^6}' * 5).format(*japan))
        print(('{:^8}' * 5).format(*chars))
        print()


def main():
    if len(sys.argv) >= 2:
        mode = sys.argv[1]
    else:
        mode = 'help'

    funs = {
        'test': test,
        'search': search,
        'table': table,
    }

    if mode in funs:
        try:
            funs[mode]()
        except (EOFError, KeyboardInterrupt):
            exit()
    else:
        print(help_messages)


if __name__ == '__main__':
    main()
